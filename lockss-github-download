#!/bin/sh

# Copyright (c) 2000-2021, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

#
# Version
#

VERSION='1.1.0-dev'

#
# Program name
#

_0='lockss-github-download'

#
# Constants
#

DEFAULT_GIT_BRANCH='master'
DEFAULT_GIT_PROJECT='https://github.com/lockss/lockss-installer'

#
# Fatal
# $1: optional message
#
Fatal()
{
  if [ -n "${1}" ] ; then
    echo "${_0}: error: ${1}" >&2
    if [ -n "${PREVIOUS_DIR}" ] ; then
      echo "Previously successful download retained in ${PREVIOUS_DIR}" >&2
    fi
  fi
  exit 1
}

#
# Graceful
#
Graceful()
{
  exit 0
}

#
# Create_Download_Dir
#
Create_Download_Dir()
{
  if [ -d "${DOWNLOAD_DIR}" ] ; then
    return
  fi
  if [ -e "${DOWNLOAD_DIR}" ] ; then
    Fatal "${DOWNLOAD_DIR} already exists but is not a directory"
  fi
  $SUDO mkdir -p "${DOWNLOAD_DIR}" || Fatal "could not create ${DOWNLOAD_DIR}"
}

#
# Download_From_Github
#
Download_From_Github()
{
  case "${GIT_BRANCH}${GIT_COMMIT}${GIT_TAG}" in
    "${GIT_BRANCH}") _url="https://github.com/${GIT_PROJECT}/archive/refs/heads/${GIT_BRANCH}" ;;
    "${GIT_COMMIT}") _url="https://github.com/${GIT_PROJECT}/archive/${GIT_COMMIT}" ;;
    "${GIT_TAG}") _url="https://github.com/${GIT_PROJECT}/archive/refs/tags/${GIT_TAG}" ;;
    *) Fatal 'unknown Git reference' ;; # shouldn't happen
  esac
  case "${ARCHIVER}" in
    gtar|tar) _url="${_url}.tar.gz" ;;
    *) Fatal "unknown archiver: ${ARCHIVER}" ;; # shouldn't happen
  esac
  ( case "${DOWNLOADER}" in
      curl) curl -sSfL "${_url}" ;;
      wget) wget -qO- "${_url}" ;;
      *) Fatal "unknown downloader: ${DOWNLOADER}" ;; # shouldn't happen
    esac \
      | case "${ARCHIVER}" in
          gtar|tar) $SUDO "$ARCHIVER" xzf - --directory="${DOWNLOAD_DIR}" --strip-components=1 ;;
          *) Fatal "unknown archiver: ${ARCHIVER}" ;; # shouldn't happen ;;
        esac ) || Fatal "could not download and extract ${_url}"
}

#
# Handle_Previous_Dir
#
Handle_Previous_Dir()
{
  if [ "${KEEP_PREVIOUS}" != 'true' ] && [ -d "${PREVIOUS_DIR}" ] ; then
    $SUDO rm -rf "${PREVIOUS_DIR}" || Fatal "could not delete ${PREVIOUS_DIR}"
    PREVIOUS_DIR=''
  fi
}

#
# Print_Help
#
Print_Help()
{
  cat <<MyEOF
${_0} version ${VERSION}

Usage:

  ${_0} [--git-project=PRO] [--download-dir=DIR] [--keep-previous]
    [--git-branch=BRA|--git-commit=COM|--git-tag=TAG]
  ${_0} --help
  ${_0} --version

Options:

  --download-dir=DIR, -download-dir DIR, -d DIR
    Download into DIR (default: \$HOME/\$Y-download where Y is derived from the
    Git project reference https://github.com/X/Y)

  --git-branch=BRA, -git-branch BRA, -b BRA
    Use Git branch BRA (default: ${DEFAULT_GIT_BRANCH})

  --git-commit=COM, -git-commit COM, -c COM
    Use Git commit COM instead of a Git branch

  --git-project=PRO, -git-project PRO, -p PRO
    Use GitHub project PRO (default: ${DEFAULT_GIT_PROJECT});
    format: https://github.com/foo/bar, https://github.com/foo/bar.git,
    git@github.com:foo/bar, git@github.com:foo/bar.git, foo/bar (GitHub implied)

  --git-tag=TAG, -git-tag TAG, -t TAG
    Use Git tag TAG instead of a Git branch 

  --help, -help, -h
    Display this message and exit

  --keep-previous, -keep-previous, -k
    Keep a copy of the previous download, by renaming it with a timestamp

  --version, -version, -V
    Display this program's version number and exit
MyEOF
}

#
# Parse_Command_Line
# Must be called with "$@"
#
Parse_Command_Line()
{
  while [ $# -gt 0 ] ; do
    case "${1}" in

      --download-dir=*) Set_Download_Dir "${1#*=}" ; shift ;;
      -download-dir|-d) Set_Download_Dir "${2}" ; shift ; shift ;;

      --git-branch=*) Set_Git_Branch "${1#*=}" ; shift ;;
      -git-branch|-b) Set_Git_Branch "${2}" ; shift ; shift ;;

      --git-commit=*) Set_Git_Commit "${1#*=}" ; shift ;;
      -git-commit|-c) Set_Git_Commit "${2}" ; shift ; shift ;;

      --git-project=*) Set_Git_Project "${1#*=}" ; shift ;;
      -git-project|-p) Set_Git_Project "${2}" ; shift ; shift ;;

      --git-tag=*) Set_Git_Tag "${1#*=}" ; shift ;;
      -git-tag|-t) Set_Git_Tag "${2}" ; shift ; shift ;;

      --help|-help|-h) Print_Help ; Graceful ;;
        
      --keep-previous|-keep-previous|-k) KEEP_PREVIOUS='true' ; shift ;;

      --version|-version|-V) echo "${VERSION}" ; Graceful ;;

      -*) Fatal "Unknown option: ${1}" ;;

      *) Fatal "Unexpected argument: ${1:-empty string}" ;;

    esac
  done
  
  case "${GIT_BRANCH}${GIT_COMMIT}${GIT_TAG}" in
    '') GIT_BRANCH="${DEFAULT_GIT_BRANCH}" ;;
    "${GIT_BRANCH}"|"${GIT_COMMIT}"|"${GIT_TAG}") ;;
    *) Fatal '--git-branch, --git-commit, --git-tag: at most one can be used' ;;
  esac

  if [ -z "${GIT_PROJECT}" ] ; then
    Set_Git_Project "${DEFAULT_GIT_PROJECT}"
  fi
  
  if [ -z "${DOWNLOAD_DIR}" ] ; then
    Set_Download_Dir "${HOME}/$(basename "${GIT_PROJECT}")-download"
  fi
}

#
# Rename_Previous_Dir
#
Rename_Previous_Dir()
{
  if [ ! -e "${DOWNLOAD_DIR}" ] ; then
    return
  fi
  _tmstp="$(date +%Y%m%d%H%M%S)"
  while [ -e "${DOWNLOAD_DIR}.${_tmstp}" ] ; do
    _tmstp="$(expr "${_tmstp}" + 1)"
  done
  $SUDO mv "${DOWNLOAD_DIR}" "${DOWNLOAD_DIR}.${_tmstp}" || Fatal "could not rename ${DOWNLOAD_DIR} to ${DOWNLOAD_DIR}.${_tmstp}"
  PREVIOUS_DIR="${DOWNLOAD_DIR}.${_tmstp}"
}

#
# Set_Archiver
#
Set_Archiver()
{
  if [ "$(uname -s)" = 'Darwin' ] && command -v gtar > /dev/null ; then
    ARCHIVER='gtar'
  else
    for _a in tar ; do
      if command -v "${_a}" > /dev/null ; then
        ARCHIVER="${_a}"
        break
      fi
    done
  fi
  if [ -z "${ARCHIVER}" ] ; then
    Fatal 'tar (or gtar) must be installed and on the PATH'
  fi
}

#
# Set_Download_Dir
# $1: directory path
#
Set_Download_Dir()
{
  if [ -z "${1}" ] ; then
    Fatal '--download-dir: empty directory path'
  fi
  if [ -z "${DOWNLOAD_DIR}" ] ; then
    DOWNLOAD_DIR="${1}"
  elif [ "${1}" != "${DOWNLOAD_DIR}" ] ; then
    Fatal "--download-dir: ${1} conflicts with ${DOWNLOAD_DIR}"
  fi
}

#
# Set_Downloader
#
Set_Downloader()
{
  for _d in curl wget ; do
    if command -v "${_d}" > /dev/null ; then
      DOWNLOADER="${_d}"
      break
    fi
  done
  if [ -z "${DOWNLOADER}" ] ; then
    Fatal 'curl or wget must be installed and on the PATH'
  fi
}

#
# Set_Git_Branch
# $1: branch name
#
Set_Git_Branch()
{
  if [ -z "${1}" ] ; then
    Fatal '--git-branch: empty branch name'
  fi
  if [ -z "${GIT_BRANCH}" ] ; then
    GIT_BRANCH="${1}"
  elif [ "${1}" != "${GIT_BRANCH}" ] ; then
    Fatal "--git-branch: ${1} conflicts with ${GIT_BRANCH}"
  fi
}

#
# Set_Git_Commit
# $1: commit name
#
Set_Git_Commit()
{
  if [ -z "${1}" ] ; then
    Fatal '--git-commit: empty commit name'
  fi
  if [ -z "${GIT_COMMIT}" ] ; then
    GIT_COMMIT="${1}"
  elif [ "${1}" != "${GIT_COMMIT}" ] ; then
    Fatal "--git-commit: ${1} conflicts with ${GIT_COMMIT}"
  fi
}

#
# Set_Git_Project
# $1: project reference (foo/bar, https://github.com/foo/bar, https://github.com/foo/bar.git, git@github.com:foo/bar)
#
Set_Git_Project()
{
  if [ -z "${1}" ] ; then
    Fatal '--git-project: empty project reference'
  fi
  case "${1}" in
    https://github.com/*/*) _proj="${1%.git}" ; _proj="${_proj#https://github.com/}" ;;
    git@github.com:*/*) _proj="${1%.git}" ; _proj="${_proj#git@github.com:}" ;;
    */*) _proj="${1}" ;;
    *) Fatal "--git-project: ${1} is not a valid project reference" ;;
  esac
  if [ "${_proj%/*}/${_proj#*/}" != "${_proj}" ] ; then
    Fatal "--git-project: ${1} is not a valid project reference"
  fi
  if [ -z "${GIT_PROJECT}" ] ; then
    GIT_PROJECT="${_proj}"
  elif [ "${_proj}" != "${GIT_PROJECT}" ] ; then
    Fatal "--git-project: ${_proj} conflicts with ${GIT_PROJECT}"
  fi
}

#
# Set_Git_Tag
# $1: tag name
#
Set_Git_Tag()
{
  if [ -z "${1}" ] ; then
    Fatal '--git-tag: empty tag name'
  fi
  if [ -z "${GIT_TAG}" ] ; then
    GIT_TAG="${1}"
  elif [ "${1}" != "${GIT_TAG}" ] ; then
    Fatal "--git-tag: ${1} conflicts with ${GIT_TAG}"
  fi
}

#
# Set_Sudo
#
Set_Sudo()
{
  SUDO=''
  return
#  if ! command -v id > /dev/null ; then
#    Fatal 'id must be installed and on the PATH'
#  fi
#  if [ "$(id -u)" = '0' ] ; then
#    SUDO=''
#  else
#    if ! command -v sudo > /dev/null ; then
#      Fatal 'sudo must be installed and on the PATH' 
#    fi
#    SUDO='sudo'
#  fi
}

#
# Variables
#

ARCHIVER=''
DOWNLOAD_DIR=''
DOWNLOADER=''
GIT_BRANCH=''
GIT_COMMIT=''
GIT_PROJECT=''
GIT_TAG=''
KEEP_PREVIOUS=''
PREVIOUS_DIR=''
SUDO=''

#
# Main
#

Parse_Command_Line "$@"
Set_Sudo
Set_Downloader
Set_Archiver
Rename_Previous_Dir
Create_Download_Dir
Download_From_Github
Handle_Previous_Dir
Graceful
